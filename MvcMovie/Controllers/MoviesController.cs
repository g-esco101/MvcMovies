using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using MvcMovie.Models;

namespace MvcMovie.Controllers
{

    // A request to the Movies controller returns all the entries in the Movies table and then 
    // passes the results to the Index view. The following line from the MoviesController class
    // instantiates a movie database context, as described previously. You can use the movie 
    // database context (private MovieDBContext db = new MovieDBContext())to query, edit, and delete movies.

    // This file was generated by VS when MoviesController was added. Views\Movies & its files were also generated.
    public class MoviesController : Controller
    {
        private MovieDBContext db = new MovieDBContext();

        /*The s => s.Title code above is a Lambda Expression. Lambdas are used in method-based LINQ 
         * queries as arguments to standard query operator methods such as the Where method used in
         * the above code. LINQ queries are not executed when they are defined or when they are
         * modified by calling a method such as Where or OrderBy. Instead, query execution is 
         * deferred, which means that the evaluation of an expression is delayed until its realized 
         * value is actually iterated over or the ToList method is called. In the Search sample, the 
         * query is executed in the Index.cshtml view. For more information about deferred query 
         * execution, see Query Execution.*/
        // The Contains method is run on the database, not the c# code above. On the database, 
        // Contains maps to SQL LIKE, which is case insensitive.
        // Run the application and navigate to /Movies/Index. Append a query string such 
        // as ?searchString=ghost to the URL. The filtered movies are displayed.

        // Storing category data (such a movie genres) as a SelectList object in a ViewBag, then 
        // accessing the category data in a dropdown list box is a typical approach for MVC applications.
        
        // GET: Movies
        public ActionResult Index(string movieGenre, string searchString)
        {
            var GenreLst = new List<string>();

            var GenreQry = from d in db.Movies
                           orderby d.Genre
                           select d.Genre;

            GenreLst.AddRange(GenreQry.Distinct());
            ViewBag.movieGenre = new SelectList(GenreLst);

            var movies = from m in db.Movies
                         select m;

            if (!String.IsNullOrEmpty(searchString))
            {
                movies = movies.Where(s => s.Title.Contains(searchString));
            }
            // The following code shows how to check the movieGenre parameter. If it's not empty, 
            // the code further constrains the movies query to limit the selected movies to the specified genre.
            if (!string.IsNullOrEmpty(movieGenre))
            {
                movies = movies.Where(x => x.Genre == movieGenre); // the query is not run on the 
                // database until the movie list is iterated over (which happens in the View, after the Index action method returns
            }

            return View(movies);
        }

        //  Notice how the code creates a List object when it calls the View helper method in the 
        // Index action method. The code then passes this Movies list from the Index action method to the view:
        // When you created the movie controller, Visual Studio automatically included the following @model 
        // statement at the top of the Index.cshtml file.
        // This @model directive allows you to access the list of movies that the controller passed to 
        // the view by using a Model object that's strongly typed.

        // GET: Movies/Details/5
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Movie movie = db.Movies.Find(id);
            if (movie == null)
            {
                return HttpNotFound();
            }
            return View(movie);
        }
        //You can also pass action method parameters using a query string. For example, 
        // the URL http://localhost:1234/Movies/Edit?ID=3 also passes the parameter ID of 
        // 3 to the Edit action method of the Movies controller.

        // GET: Movies/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: Movies/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "ID,Title,ReleaseDate,Genre,Price,Rating")] Movie movie)
        {
            if (ModelState.IsValid)
            {
                db.Movies.Add(movie);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            return View(movie);
        }

        // GET: Movies/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Movie movie = db.Movies.Find(id);
            if (movie == null)
            {
                return HttpNotFound();
            }
            return View(movie);
        }

        // POST: Movies/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "ID,Title,ReleaseDate,Genre,Price,Rating")] Movie movie)
        {
            if (ModelState.IsValid)
            {
                db.Entry(movie).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(movie);
        }
        /*Notice the second Edit action method is preceded by the HttpPost attribute. This attribute
         * specifies that the overload of the Edit method can be invoked only for POST requests. You 
         * could apply the HttpGet attribute to the first edit method, but that's not necessary because
         * it's the default. (We'll refer to action methods that are implicitly assigned the HttpGet
         * attribute as HttpGet methods.) The Bind attribute is another important security mechanism 
         * that keeps hackers from over-posting data to your model. You should only include properties
         * in the bind attribute that you want to change. You can read about overposting and the bind
         * attribute in my overposting security note. In the simple model used in this tutorial, we
         * will be binding all the data in the model. The ValidateAntiForgeryToken attribute is used
         * to prevent forgery of a request and is paired up with @Html.AntiForgeryToken() in the edit
         * view file (Views\Movies\Edit.cshtml), a portion is shown below:*/

        // GET: Movies/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Movie movie = db.Movies.Find(id);
            if (movie == null)
            {
                return HttpNotFound();
            }
            return View(movie);
        }

        // POST: Movies/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Movie movie = db.Movies.Find(id);
            db.Movies.Remove(movie);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
